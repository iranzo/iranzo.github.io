<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CoreOS on Pablo Iranzo Gómez blog</title>
    <link>https://iranzo.io/tags/coreos/</link>
    <description>Recent content in CoreOS on Pablo Iranzo Gómez blog</description>
    <image>
      <title>Pablo Iranzo Gómez blog</title>
      <url>https://iranzo.io/mugshot.png</url>
      <link>https://iranzo.io/mugshot.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2025 09:33:05 +0000</lastBuildDate>
    <atom:link href="https://iranzo.io/tags/coreos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenShift Layered Images for patching</title>
      <link>https://iranzo.io/blog/2023/11/08/openshift-layered-images-for-patching/</link>
      <pubDate>Wed, 08 Nov 2023 00:00:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2023/11/08/openshift-layered-images-for-patching/</guid>
      <description>&lt;p&gt;With recent releases of OpenShift like 4.13 you can use &lt;a href=&#34;https://access.redhat.com/documentation/es-es/openshift_container_platform/4.13/html/post-installation_configuration/coreos-layering&#34;&gt;CoreOS Layering&lt;/a&gt; to apply custom images to the nodes.&lt;/p&gt;
&lt;p&gt;The feature allows to build, via a &lt;code&gt;Dockerfile&lt;/code&gt; a custom image that can later be applied to our nodes.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s review the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First we need to find the base image being used in our environment with &lt;code&gt;oc adm release info quay.io/openshift-release-dev/ocp-release:4.13.5-aarch64 --image-for=rhel-coreos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then we use the returned value in the &lt;code&gt;FROM&lt;/code&gt; line in our Dockerfile&lt;/li&gt;
&lt;li&gt;If we want to add custom packages, we should have a server which is reachable and run &lt;code&gt;createrepo&lt;/code&gt; on the folder containing the rpm&amp;rsquo;s so that &lt;code&gt;rpm-ostree&lt;/code&gt; can download them for installation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example dockerfile:&lt;/p&gt;</description>
    </item>
    <item>
      <title>OSP Director baremetal hypervisor for CoreOS</title>
      <link>https://iranzo.io/blog/2019/01/08/osp-director-baremetal-hypervisor-for-coreos/</link>
      <pubDate>Tue, 08 Jan 2019 17:30:36 +0100</pubDate>
      <guid>https://iranzo.io/blog/2019/01/08/osp-director-baremetal-hypervisor-for-coreos/</guid>
      <description>&lt;h2 id=&#34;osp-director&#34;&gt;OSP Director&lt;/h2&gt;
&lt;p&gt;OSP Director (or upstream TripleO) is a life-cycle manager for OpenStack based on the idea of using &amp;lsquo;OpenStack&amp;rsquo; to deploy &amp;lsquo;OpenStack&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;To do so, it creates a management &amp;lsquo;Undercloud&amp;rsquo;, that is configured and prepared for later deploying an &amp;lsquo;overcloud&amp;rsquo; which is the one that will later run the workloads.&lt;/p&gt;
&lt;p&gt;TripleO/Director, also automates the inspection of hosts and tagging to the roles they will perform later in the &amp;lsquo;overcloud&amp;rsquo; setup, such as &amp;lsquo;controller&amp;rsquo;, &amp;lsquo;compute&amp;rsquo;, &amp;lsquo;storage&amp;rsquo;, or even mixed roles via &lt;code&gt;composable-roles&lt;/code&gt; support.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
