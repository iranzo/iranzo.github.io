<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OpenStack on Pablo Iranzo Gómez blog</title>
    <link>https://iranzo.io/tags/openstack/</link>
    <description>Recent content in OpenStack on Pablo Iranzo Gómez blog</description>
    <image>
      <title>Pablo Iranzo Gómez blog</title>
      <url>https://iranzo.io/mugshot.png</url>
      <link>https://iranzo.io/mugshot.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2025 09:32:34 +0000</lastBuildDate>
    <atom:link href="https://iranzo.io/tags/openstack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OSP Director baremetal hypervisor for CoreOS</title>
      <link>https://iranzo.io/blog/2019/01/08/osp-director-baremetal-hypervisor-for-coreos/</link>
      <pubDate>Tue, 08 Jan 2019 17:30:36 +0100</pubDate>
      <guid>https://iranzo.io/blog/2019/01/08/osp-director-baremetal-hypervisor-for-coreos/</guid>
      <description>&lt;h2 id=&#34;osp-director&#34;&gt;OSP Director&lt;/h2&gt;
&lt;p&gt;OSP Director (or upstream TripleO) is a life-cycle manager for OpenStack based on the idea of using &amp;lsquo;OpenStack&amp;rsquo; to deploy &amp;lsquo;OpenStack&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;To do so, it creates a management &amp;lsquo;Undercloud&amp;rsquo;, that is configured and prepared for later deploying an &amp;lsquo;overcloud&amp;rsquo; which is the one that will later run the workloads.&lt;/p&gt;
&lt;p&gt;TripleO/Director, also automates the inspection of hosts and tagging to the roles they will perform later in the &amp;lsquo;overcloud&amp;rsquo; setup, such as &amp;lsquo;controller&amp;rsquo;, &amp;lsquo;compute&amp;rsquo;, &amp;lsquo;storage&amp;rsquo;, or even mixed roles via &lt;code&gt;composable-roles&lt;/code&gt; support.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contributing to OSP upstream a.k.a. Peer Review</title>
      <link>https://iranzo.io/blog/2018/10/16/contributing-to-osp-upstream-a.k.a.-peer-review/</link>
      <pubDate>Tue, 16 Oct 2018 07:32:47 +0200</pubDate>
      <guid>https://iranzo.io/blog/2018/10/16/contributing-to-osp-upstream-a.k.a.-peer-review/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the article &amp;ldquo;&lt;a href=&#34;../../blog/2016/07/21/contributing-to-openstack/&#34;&gt;Contributing to OpenStack&lt;/a&gt;&amp;rdquo; we did cover on how to prepare accounts and prepare your changes for submission upstream (and even how to find &lt;code&gt;low hanging fruits&lt;/code&gt; to start contributing).&lt;/p&gt;
&lt;p&gt;Here, we&amp;rsquo;ll cover what happens behind the scene to get change published.&lt;/p&gt;
&lt;h2 id=&#34;upstream-workflow&#34;&gt;Upstream workflow&lt;/h2&gt;
&lt;h3 id=&#34;peer-review&#34;&gt;Peer review&lt;/h3&gt;
&lt;p&gt;Upstream contributions to OSP and other projects are based on Peer Review, that means that once a new set of code has been submitted, several steps for validation are required/happen before having it implemented.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevConf.cz 2018: Citellus - Detecting common pitfalls of deployments</title>
      <link>https://iranzo.io/presentations/citellus/devconfcz-2018/devconfcz2018-presentation-revealmd/</link>
      <pubDate>Sat, 27 Jan 2018 16:00:00 +0100</pubDate>
      <guid>https://iranzo.io/presentations/citellus/devconfcz-2018/devconfcz2018-presentation-revealmd/</guid>
      <description>&lt;h2 id=&#34;citellus&#34;&gt;&lt;a href=&#34;https://github.com/citellusorg/citellus&#34;&gt;Citellus&lt;/a&gt;:&lt;/h2&gt;
&lt;h3 id=&#34;detecting-common-pitfalls-of-deployments&#34;&gt;Detecting common pitfalls of deployments&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;citellus.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/citellusorg/citellus&#34;&gt;https://github.com/citellusorg/citellus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recording at &lt;a href=&#34;https://www.youtube.com/watch?v=SDzzqrUdn5A&#34;&gt;https://www.youtube.com/watch?v=SDzzqrUdn5A&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-citellus&#34;&gt;What is Citellus?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Citellus is a framework populated by community-contributed scripts that automate detecting problems, including configuration issues, conflicts with package versions, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;history-how-did-was-it-started&#34;&gt;History: how did was it started?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The tool, started by Robin Černín after a long weekend shift checking one and over again several sosreports for the same data on different hosts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It started with some tests + shell wrapper, and was added a python wrapper by Pablo Iranzo to bring in more powerful features.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins for running CI tests</title>
      <link>https://iranzo.io/blog/2017/08/17/jenkins-for-running-ci-tests/</link>
      <pubDate>Thu, 17 Aug 2017 23:54:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2017/08/17/jenkins-for-running-ci-tests/</guid>
      <description>&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;While working on &lt;a href=&#34;https://iranzo.io/blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./&#34;&gt;Citellus&lt;/a&gt; and &lt;a href=&#34;https://iranzo.io/blog/2017/07/31/magui-for-analysis-of-issues-across-several-hosts./&#34;&gt;Magui&lt;/a&gt; it soon became evident that Unit testing for validating the changes was a requirement.&lt;/p&gt;
&lt;p&gt;Initially, using a &lt;code&gt;.travis.yml&lt;/code&gt; file contained in the repo and the free service provided by &lt;a href=&#34;https://travis-ci.org&#34;&gt;https://travis-ci.org&lt;/a&gt; we soon got &lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt; repo providing information about if the builds succeeded or not.&lt;/p&gt;
&lt;p&gt;When it was decided to move to &lt;a href=&#34;https://gerrithub.io&#34;&gt;https://gerrithub.io&lt;/a&gt; to work in a more similar way to what is being done in upstream, we improved on the code commenting (peer review), but we lost the ability to run the tests in an automated way until the change was merged into github.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Magui for analysis of issues across several hosts.</title>
      <link>https://iranzo.io/blog/2017/07/31/magui-for-analysis-of-issues-across-several-hosts./</link>
      <pubDate>Mon, 31 Jul 2017 12:45:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2017/07/31/magui-for-analysis-of-issues-across-several-hosts./</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../../blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./&#34;&gt;Citellus&lt;/a&gt; allows to check a sosreport against known problems identified on the provided tests.&lt;/p&gt;
&lt;p&gt;This approach is easy to implement and easy to test but has limitations when a problem can span across several hosts and only the problem reveals itself when a general analysis is performed.&lt;/p&gt;
&lt;p&gt;Magui tries to solve that by running the analysis functions inside citellus across a set of sosreports, unifying the data obtained per citellus plugin.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Citellus: framework for detecting known issues in systems.</title>
      <link>https://iranzo.io/blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./</link>
      <pubDate>Wed, 26 Jul 2017 22:26:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./</guid>
      <description>Learn about Citellus, a framework that will help you detect known issues, and more insightful information about your system</description>
    </item>
    <item>
      <title>InfraRed for deploying OpenStack</title>
      <link>https://iranzo.io/blog/2017/02/23/infrared-for-deploying-openstack/</link>
      <pubDate>Thu, 23 Feb 2017 23:27:00 +0100</pubDate>
      <guid>https://iranzo.io/blog/2017/02/23/infrared-for-deploying-openstack/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/redhat-openstack/infrared/&#34;&gt;InfraRed&lt;/a&gt; is tool that allows to install/provision OpenStack. You can find the documentation for the project at &lt;a href=&#34;http://infrared.readthedocs.io&#34;&gt;http://infrared.readthedocs.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, developers and users are online in FreeNode at #infrared channel.&lt;/p&gt;
&lt;h2 id=&#34;why-infrared&#34;&gt;Why InfraRed?&lt;/h2&gt;
&lt;p&gt;Deploying OSP with OSP-d (TripleO) requires several setup steps for preparation, deployment, etc. InfraRed simplifies them by automating with ansible most of those steps and configuration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It allows to deploy several OSP versions&lt;/li&gt;
&lt;li&gt;Allows to ease connection to installed vm roles (Ceph, Computes, Controllers, Undercloud)&lt;/li&gt;
&lt;li&gt;Allows to define working environments so one InfraRed-running host can be used to manage different environments&lt;/li&gt;
&lt;li&gt;and much more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setup-of-infrared-running-host&#34;&gt;Setup of InfraRed-running host&lt;/h2&gt;
&lt;p&gt;Setting InfraRed is quite easy, at the moment the version 2 (branch on github) is working pretty well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started with Ansible</title>
      <link>https://iranzo.io/blog/2017/02/20/getting-started-with-ansible/</link>
      <pubDate>Mon, 20 Feb 2017 23:10:00 +0100</pubDate>
      <guid>https://iranzo.io/blog/2017/02/20/getting-started-with-ansible/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve started to get familiar with &lt;a href=&#34;http://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; because,
apart of getting more and more accepted for OSP-related tasks and
installation, I wanted to automate some tasks we needed to setup some servers
for the OpenStack group I work for.&lt;/p&gt;
&lt;p&gt;First of all, it&amp;rsquo;s recommended to get latest version of ansible (tested on
RHEL7 and Fedora), but in order not to mess with the system python libraries, it&amp;rsquo;s convenient to use python&amp;rsquo;s virtual environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing for stampy</title>
      <link>https://iranzo.io/blog/2016/11/05/unit-testing-for-stampy/</link>
      <pubDate>Sat, 05 Nov 2016 19:39:00 +0100</pubDate>
      <guid>https://iranzo.io/blog/2016/11/05/unit-testing-for-stampy/</guid>
      <description>&lt;p&gt;Since my prior post on &lt;a href=&#34;../../blog/2016/07/21/contributing-to-openstack/&#34;&gt;Contributing to OpenStack&lt;/a&gt;, I liked the idea of using some automated tests to validate functionality and specifically, the corner cases that could arise when playing with the code.&lt;/p&gt;
&lt;p&gt;Most of the errors fixed so far on stampy, were related with some pieces of the code not properly handling UTF or some information returned, etc and still it has improved, the idea of ensuring that prior errors were not put back into the code when some other changes were performed, started to arise to be a priority.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contributing to OpenStack</title>
      <link>https://iranzo.io/blog/2016/07/21/contributing-to-openstack/</link>
      <pubDate>Thu, 21 Jul 2016 17:32:47 +0200</pubDate>
      <guid>https://iranzo.io/blog/2016/07/21/contributing-to-openstack/</guid>
      <description>&lt;p&gt;Contributing to an OpenSource project might take some time at the beginning, the good thing with OpenStack is that there are lot of guides on how to start and collaborate.&lt;/p&gt;
&lt;p&gt;What I did is to look for a bug in the project tagged as &lt;a href=&#34;https://bugs.launchpad.net/openstack/&amp;#43;bugs?field.tag=low-hanging-fruit&amp;amp;orderby=status&amp;amp;start=0&#34;&gt;low-hanging-fruit&lt;/a&gt;, this allows to browse a large list of bugs that are classified as &lt;code&gt;easy&lt;/code&gt;, so they are the best place for new starters to get familiar with the workflow.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHEV-M with nested VM for OSP</title>
      <link>https://iranzo.io/blog/2015/07/17/rhev-m-with-nested-vm-for-osp/</link>
      <pubDate>Fri, 17 Jul 2015 18:34:17 +0200</pubDate>
      <guid>https://iranzo.io/blog/2015/07/17/rhev-m-with-nested-vm-for-osp/</guid>
      <description>&lt;p&gt;Since some time ago, I&amp;rsquo;ve been mostly dealing with OpenStack, requiring different releases to test for different tests, etc.&lt;/p&gt;
&lt;p&gt;Virtualization, as provided by KVM requires some CPU flags to get accelerated operations, &lt;code&gt;vmx&lt;/code&gt; and &lt;code&gt;svm&lt;/code&gt; depending on your processor architecture, but, of course, this is only provided on bare-metal.&lt;/p&gt;
&lt;p&gt;In order to get more flexibility at the expense of performance, &lt;code&gt;nestedvt&lt;/code&gt; allows to expose those flags to the VM&amp;rsquo;s running at the hypervisor so you can run another level of VM&amp;rsquo;s inside those VM&amp;rsquo;s (this starts to sound like the movie &lt;a href=&#34;http://www.imdb.com/title/tt1375666/&#34;&gt;Inception&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
