<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Pablo Iranzo Gómez blog</title>
    <link>https://iranzo.io/tags/python/</link>
    <description>Recent content in Python on Pablo Iranzo Gómez blog</description>
    <image>
      <title>Pablo Iranzo Gómez blog</title>
      <url>https://iranzo.io/mugshot.png</url>
      <link>https://iranzo.io/mugshot.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2025 09:34:12 +0000</lastBuildDate>
    <atom:link href="https://iranzo.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[python] Generate ranges from items</title>
      <link>https://iranzo.io/blog/2022/11/25/python-generate-ranges-from-items/</link>
      <pubDate>Fri, 25 Nov 2022 07:00:46 +0000</pubDate>
      <guid>https://iranzo.io/blog/2022/11/25/python-generate-ranges-from-items/</guid>
      <description>&lt;p&gt;Some years ago, I added a script for updating headers for &lt;code&gt;(C)&lt;/code&gt; in the python files I was developing for &lt;a href=&#34;../../tags/risu/&#34;&gt;Risu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this way, the header got the list of authors and years working on the files updated automatically.&lt;/p&gt;
&lt;p&gt;With the pass of the years, the list started to became a bit too long, so I worked on creating code for getting ranges instead.&lt;/p&gt;
&lt;p&gt;This is the code I used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getranges&lt;/span&gt;(data):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    From list of strings representing numbers, get ranges and return list of strings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :param data: list of strings representing numbers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    :return: list of strings with number ranges when &amp;gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Convert to integers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; data:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Prepare iteration loop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    idata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next(idata)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Process next item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; following &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; idata:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; following &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Years are continuum, just update previous&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; following
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Years are not continuum, end range and start again&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; prev:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(first)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; prev:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# Only one item in difference, append items individually&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(first)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(prev)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (first, prev))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; following
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Catchall for regular execution or last remaining range&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; prev:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(first)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; prev:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Only one item in difference, append items individually&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(first)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(prev)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (first, prev))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Convert back to text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [str(i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; result]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With it, previous headers like:&lt;/p&gt;</description>
    </item>
    <item>
      <title>In action...@redken_bot with examples</title>
      <link>https://iranzo.io/blog/2022/01/20/in-action...@redken_bot-with-examples/</link>
      <pubDate>Thu, 20 Jan 2022 17:20:14 +0100</pubDate>
      <guid>https://iranzo.io/blog/2022/01/20/in-action...@redken_bot-with-examples/</guid>
      <description>See how to use @redken_bot in Telegram or discord with some examples!</description>
    </item>
    <item>
      <title>LDAP query from Python</title>
      <link>https://iranzo.io/blog/2021/10/19/ldap-query-from-python/</link>
      <pubDate>Tue, 19 Oct 2021 22:34:34 +0200</pubDate>
      <guid>https://iranzo.io/blog/2021/10/19/ldap-query-from-python/</guid>
      <description>This article describes how to use python to bind against an LDAP server and perform queries</description>
    </item>
    <item>
      <title>Redken machine learning for spam detection</title>
      <link>https://iranzo.io/blog/2021/06/24/redken-machine-learning-for-spam-detection/</link>
      <pubDate>Thu, 24 Jun 2021 22:00:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2021/06/24/redken-machine-learning-for-spam-detection/</guid>
      <description>&lt;p&gt;For some of the telegram groups I&amp;rsquo;m in, I&amp;rsquo;ve been detecting users that after some period of time, just publish spam messages of any topic.&lt;/p&gt;
&lt;p&gt;There are many bots for controlling when a user joins, by showing a CAPTCHA that user must resolve (either clicking a button, answering a mathematical operation, inputting a CAPTCHA image text, etc).&lt;/p&gt;
&lt;p&gt;Some time ago, a colleague was using Machine Learning and I wanted to have a look at it and it would make a good feature to implement.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Language detection in @redken_bot</title>
      <link>https://iranzo.io/blog/2020/03/25/language-detection-in-@redken_bot/</link>
      <pubDate>Wed, 25 Mar 2020 20:00:24 +0100</pubDate>
      <guid>https://iranzo.io/blog/2020/03/25/language-detection-in-@redken_bot/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Before the move to Python3, &lt;a href=&#34;https://t.me/redken_bot&#34;&gt;redken&lt;/a&gt; had per-group language configuration by using i18n, with the upgrade/rewrite of Python3 code there were some issues and I had to remove the support, defaulting everything to English (most of the outputs where already in English so not a great loss).&lt;/p&gt;
&lt;p&gt;On another side, having to manually configure each channel could be problematic as most users just add the bot to their groups but don&amp;rsquo;t care about other settings that might be useful like &lt;code&gt;welcome&lt;/code&gt; message, &lt;code&gt;inactivity&lt;/code&gt; for kicking out inactive users, etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>API access for Google Calendar and Google Sheet access</title>
      <link>https://iranzo.io/blog/2019/11/28/api-access-for-google-calendar-and-google-sheet-access/</link>
      <pubDate>Thu, 28 Nov 2019 17:11:36 +0100</pubDate>
      <guid>https://iranzo.io/blog/2019/11/28/api-access-for-google-calendar-and-google-sheet-access/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;During last days I&amp;rsquo;ve been playing around with python and API access to Google Sheets.&lt;/p&gt;
&lt;p&gt;Since some time ago, I already experimented with ICS parsing from python because added &lt;a href=&#34;https://t.me/redken_bot&#34;&gt;https://t.me/redken_bot&lt;/a&gt; access to calendar files (&lt;code&gt;.ics&lt;/code&gt;) so that it can provide daily reminders on chats about the events happening for the specific date, and had the chance to propose it&amp;rsquo;s usage to cover a specific use case: Accessing a spreadsheet in Google Sheets and parse its contents and output an ICS file so that the events listed and the dates specific for each one are available in an easier-to-consume approach.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python and iCalendar ICS processing</title>
      <link>https://iranzo.io/blog/2019/09/17/python-and-icalendar-ics-processing/</link>
      <pubDate>Tue, 17 Sep 2019 07:00:36 +0200</pubDate>
      <guid>https://iranzo.io/blog/2019/09/17/python-and-icalendar-ics-processing/</guid>
      <description>This article covers  how to do Internet Calendar processing of events in python and how those are leveraged in @redken_bot</description>
    </item>
    <item>
      <title>Use custom domain name with Blog-O-Matic</title>
      <link>https://iranzo.io/blog/2019/05/16/use-custom-domain-name-with-blog-o-matic/</link>
      <pubDate>Thu, 16 May 2019 22:29:14 +0200</pubDate>
      <guid>https://iranzo.io/blog/2019/05/16/use-custom-domain-name-with-blog-o-matic/</guid>
      <description>&lt;p&gt;As a recipe, if you want to enable a custom domain name on &lt;a href=&#34;../../blog/2019/01/09/blog-o-matic-quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps./&#34;&gt;blog-o-matic&lt;/a&gt; a special file needs to be created on the &amp;lsquo;GitHub Pages&amp;rsquo; served &amp;lsquo;master&amp;rsquo; branch.&lt;/p&gt;
&lt;p&gt;In order to do so, edit &lt;code&gt;pelicanconf.py&lt;/code&gt; and add the following differences:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git a/pelicanconf.py b/pelicanconf.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 680abcb..fc3dd8f 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- a/pelicanconf.py
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ b/pelicanconf.py
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -46,13 +46,16 @@ AMAZON_ONELINK = &amp;#34;b63a2115-85f7-43a9-b169-5f4c8c275655&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; # Extra files customization
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-EXTRA_PATH_METADATA = {}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+EXTRA_PATH_METADATA = {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    &amp;#39;extra/CNAME&amp;#39;: {&amp;#39;path&amp;#39;: &amp;#39;CNAME&amp;#39;},
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; EXTRA_TEMPLATES_PATHS = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &amp;#34;plugins/revealmd/templates&amp;#34;,  # eg: &amp;#34;plugins/revealmd/templates&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-STATIC_PATHS = [ &amp;#39;images&amp;#39; ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+STATIC_PATHS = [ &amp;#39;images&amp;#39; , &amp;#39;extra&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ## ONLY TOUCH IF YOU KNOW WHAT YOU&amp;#39;RE DOING!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will copy the &lt;code&gt;CNAME&lt;/code&gt; file created in &lt;code&gt;content/extra/CNAME&lt;/code&gt; to the resulting &amp;lsquo;master&amp;rsquo; branch as &lt;code&gt;/CNAME&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>@redken_bot</title>
      <link>https://iranzo.io/redken_bot/</link>
      <pubDate>Mon, 04 Mar 2019 18:34:14 +0100</pubDate>
      <guid>https://iranzo.io/redken_bot/</guid>
      <description>Learn about Redken Telegram Bot usage and configuration settings.</description>
    </item>
    <item>
      <title>Telegram Redken bot documentation</title>
      <link>https://iranzo.io/redkendoc/telegram-redken_bot-documentation/</link>
      <pubDate>Mon, 04 Mar 2019 18:34:14 +0100</pubDate>
      <guid>https://iranzo.io/redkendoc/telegram-redken_bot-documentation/</guid>
      <description>&lt;p&gt;The new document is at &lt;a href=&#34;../../redkendoc/telegram-redken_bot-documentation/&#34;&gt;Redken Documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fixing pelican revealjs plugin</title>
      <link>https://iranzo.io/blog/2019/01/20/fixing-pelican-revealjs-plugin/</link>
      <pubDate>Sun, 20 Jan 2019 23:12:17 +0100</pubDate>
      <guid>https://iranzo.io/blog/2019/01/20/fixing-pelican-revealjs-plugin/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;After my recent talk about &lt;a href=&#34;../../blog/2019/01/09/blog-o-matic-quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps./&#34;&gt;blog-o-matic&lt;/a&gt;, I was trying to upload somewhere the slides I used.&lt;/p&gt;
&lt;p&gt;Since some time ago I started using Reveal-MD, so I could use Markdown to create and show slides, but wanted also a way to upload them for consumption.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/brookskindle/pelican-revealmd/&#34;&gt;Pelican-revealmd plugin&lt;/a&gt; seemed to be the answer.&lt;/p&gt;
&lt;p&gt;It does use pypandoc library and &lt;a href=&#34;https://pandoc.org&#34;&gt;&amp;lsquo;pandoc&amp;rsquo;&lt;/a&gt; for doing the conversion.&lt;/p&gt;
&lt;h2 id=&#34;the-problems-found&#34;&gt;The problems found&lt;/h2&gt;
&lt;p&gt;After some test, it had 3 issues:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog-o-Matic - quickly get a GitHub hosted blog with Pelican, Elegant with little setup steps.</title>
      <link>https://iranzo.io/blog/2019/01/09/blog-o-matic-quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps./</link>
      <pubDate>Wed, 09 Jan 2019 22:00:47 +0100</pubDate>
      <guid>https://iranzo.io/blog/2019/01/09/blog-o-matic-quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps./</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve already covered some articles about automation with Travis-CI, GitHub,
and one step that seems a show-stopper for many users when trying to build a
website is on one side, the investment (domain, hosting, etc), the backend
being used (WordPress, static generators, etc)&amp;hellip;&lt;/p&gt;
&lt;p&gt;While preparing a talk for a group of co-workers covering several of those aspects, I came with the idea to create Blog-o-Matic, implementing many of those &amp;rsquo;learnings&amp;rsquo; in a &amp;lsquo;canned&amp;rsquo; way that can be easy to consume by users.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Triggering a Travis-CI build on another repo</title>
      <link>https://iranzo.io/blog/2018/12/11/triggering-a-travis-ci-build-on-another-repo/</link>
      <pubDate>Tue, 11 Dec 2018 21:49:47 +0100</pubDate>
      <guid>https://iranzo.io/blog/2018/12/11/triggering-a-travis-ci-build-on-another-repo/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;After setting up &lt;a href=&#34;../../blog/2018/12/07/how-to-automate-via-travis-ci-publishing-of-new-pelican-pages-to-github-pages/&#34;&gt;build automation&lt;/a&gt; we also wanted it not to happen only when updating the &lt;code&gt;documentation&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;Besides hosting documentation, Elegant website also serves as a live demo of the current release. This meant, the website should be regenerated and updated every time when a documented is added or edited, and also when Elegant theme is updated.&lt;/p&gt;
&lt;p&gt;Github and Travis doesn&amp;rsquo;t offer dependent builds out of the box, so the trick goes to &amp;lsquo;signal&amp;rsquo; via a github token to trigger a Travis-CI build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to automate via Travis CI publishing of new pelican pages to GitHub pages</title>
      <link>https://iranzo.io/blog/2018/12/07/how-to-automate-via-travis-ci-publishing-of-new-pelican-pages-to-github-pages/</link>
      <pubDate>Fri, 07 Dec 2018 16:00:47 +0100</pubDate>
      <guid>https://iranzo.io/blog/2018/12/07/how-to-automate-via-travis-ci-publishing-of-new-pelican-pages-to-github-pages/</guid>
      <description>&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Pelican-Elegant/elegant&#34;&gt;Elegant&lt;/a&gt; theme for pelican has been undergoing a big change from individual-driven effort to community, as part of this, one of the tasks to accomplish, has been the decoupling from author blog to project site for documentation.&lt;/p&gt;
&lt;p&gt;As we wanted this process to be both automated and allowed us to demonstrate via eat-your-own-dog-food that the theme works and how it looks, the idea was to automate the rendering of Pelican website with new documents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contributing to OSP upstream a.k.a. Peer Review</title>
      <link>https://iranzo.io/blog/2018/10/16/contributing-to-osp-upstream-a.k.a.-peer-review/</link>
      <pubDate>Tue, 16 Oct 2018 07:32:47 +0200</pubDate>
      <guid>https://iranzo.io/blog/2018/10/16/contributing-to-osp-upstream-a.k.a.-peer-review/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the article &amp;ldquo;&lt;a href=&#34;../../blog/2016/07/21/contributing-to-openstack/&#34;&gt;Contributing to OpenStack&lt;/a&gt;&amp;rdquo; we did cover on how to prepare accounts and prepare your changes for submission upstream (and even how to find &lt;code&gt;low hanging fruits&lt;/code&gt; to start contributing).&lt;/p&gt;
&lt;p&gt;Here, we&amp;rsquo;ll cover what happens behind the scene to get change published.&lt;/p&gt;
&lt;h2 id=&#34;upstream-workflow&#34;&gt;Upstream workflow&lt;/h2&gt;
&lt;h3 id=&#34;peer-review&#34;&gt;Peer review&lt;/h3&gt;
&lt;p&gt;Upstream contributions to OSP and other projects are based on Peer Review, that means that once a new set of code has been submitted, several steps for validation are required/happen before having it implemented.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Peru for syncing specific git repository files</title>
      <link>https://iranzo.io/blog/2018/09/25/peru-for-syncing-specific-git-repository-files/</link>
      <pubDate>Tue, 25 Sep 2018 22:17:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2018/09/25/peru-for-syncing-specific-git-repository-files/</guid>
      <description>&lt;h2 id=&#34;peru-a-repository-synchronizer&#34;&gt;Peru a repository synchronizer&lt;/h2&gt;
&lt;p&gt;Some projects upstream &lt;code&gt;bind&lt;/code&gt; together lot of files which might not be of interest, but still the
convenience of a &lt;code&gt;git pull&lt;/code&gt; to get latest updates, makes you to download the whole
repository for just a bunch of files or folders.&lt;/p&gt;
&lt;p&gt;For example, this website uses &lt;a href=&#34;http://getpelican.com/&#34;&gt;Pelican&lt;/a&gt; to generate the webpages out of markdown files. Pelican does have a rich set of &lt;a href=&#34;https://github.com/getpelican/pelican-plugins&#34;&gt;plugins&lt;/a&gt; but all of them are in the same folder in the &lt;code&gt;git checkout&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevConf.cz 2018: Citellus - Detecting common pitfalls of deployments</title>
      <link>https://iranzo.io/presentations/citellus/devconfcz-2018/devconfcz2018-presentation-revealmd/</link>
      <pubDate>Sat, 27 Jan 2018 16:00:00 +0100</pubDate>
      <guid>https://iranzo.io/presentations/citellus/devconfcz-2018/devconfcz2018-presentation-revealmd/</guid>
      <description>&lt;h2 id=&#34;citellus&#34;&gt;&lt;a href=&#34;https://github.com/citellusorg/citellus&#34;&gt;Citellus&lt;/a&gt;:&lt;/h2&gt;
&lt;h3 id=&#34;detecting-common-pitfalls-of-deployments&#34;&gt;Detecting common pitfalls of deployments&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;citellus.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/citellusorg/citellus&#34;&gt;https://github.com/citellusorg/citellus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recording at &lt;a href=&#34;https://www.youtube.com/watch?v=SDzzqrUdn5A&#34;&gt;https://www.youtube.com/watch?v=SDzzqrUdn5A&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-citellus&#34;&gt;What is Citellus?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Citellus is a framework populated by community-contributed scripts that automate detecting problems, including configuration issues, conflicts with package versions, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;history-how-did-was-it-started&#34;&gt;History: how did was it started?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The tool, started by Robin Černín after a long weekend shift checking one and over again several sosreports for the same data on different hosts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It started with some tests + shell wrapper, and was added a python wrapper by Pablo Iranzo to bring in more powerful features.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins for running CI tests</title>
      <link>https://iranzo.io/blog/2017/08/17/jenkins-for-running-ci-tests/</link>
      <pubDate>Thu, 17 Aug 2017 23:54:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2017/08/17/jenkins-for-running-ci-tests/</guid>
      <description>&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;While working on &lt;a href=&#34;https://iranzo.io/blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./&#34;&gt;Citellus&lt;/a&gt; and &lt;a href=&#34;https://iranzo.io/blog/2017/07/31/magui-for-analysis-of-issues-across-several-hosts./&#34;&gt;Magui&lt;/a&gt; it soon became evident that Unit testing for validating the changes was a requirement.&lt;/p&gt;
&lt;p&gt;Initially, using a &lt;code&gt;.travis.yml&lt;/code&gt; file contained in the repo and the free service provided by &lt;a href=&#34;https://travis-ci.org&#34;&gt;https://travis-ci.org&lt;/a&gt; we soon got &lt;a href=&#34;https://github.com&#34;&gt;https://github.com&lt;/a&gt; repo providing information about if the builds succeeded or not.&lt;/p&gt;
&lt;p&gt;When it was decided to move to &lt;a href=&#34;https://gerrithub.io&#34;&gt;https://gerrithub.io&lt;/a&gt; to work in a more similar way to what is being done in upstream, we improved on the code commenting (peer review), but we lost the ability to run the tests in an automated way until the change was merged into github.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Magui for analysis of issues across several hosts.</title>
      <link>https://iranzo.io/blog/2017/07/31/magui-for-analysis-of-issues-across-several-hosts./</link>
      <pubDate>Mon, 31 Jul 2017 12:45:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2017/07/31/magui-for-analysis-of-issues-across-several-hosts./</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../../blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./&#34;&gt;Citellus&lt;/a&gt; allows to check a sosreport against known problems identified on the provided tests.&lt;/p&gt;
&lt;p&gt;This approach is easy to implement and easy to test but has limitations when a problem can span across several hosts and only the problem reveals itself when a general analysis is performed.&lt;/p&gt;
&lt;p&gt;Magui tries to solve that by running the analysis functions inside citellus across a set of sosreports, unifying the data obtained per citellus plugin.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Citellus: framework for detecting known issues in systems.</title>
      <link>https://iranzo.io/blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./</link>
      <pubDate>Wed, 26 Jul 2017 22:26:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2017/07/26/citellus-framework-for-detecting-known-issues-in-systems./</guid>
      <description>Learn about Citellus, a framework that will help you detect known issues, and more insightful information about your system</description>
    </item>
    <item>
      <title>InfraRed for deploying OpenStack</title>
      <link>https://iranzo.io/blog/2017/02/23/infrared-for-deploying-openstack/</link>
      <pubDate>Thu, 23 Feb 2017 23:27:00 +0100</pubDate>
      <guid>https://iranzo.io/blog/2017/02/23/infrared-for-deploying-openstack/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/redhat-openstack/infrared/&#34;&gt;InfraRed&lt;/a&gt; is tool that allows to install/provision OpenStack. You can find the documentation for the project at &lt;a href=&#34;http://infrared.readthedocs.io&#34;&gt;http://infrared.readthedocs.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, developers and users are online in FreeNode at #infrared channel.&lt;/p&gt;
&lt;h2 id=&#34;why-infrared&#34;&gt;Why InfraRed?&lt;/h2&gt;
&lt;p&gt;Deploying OSP with OSP-d (TripleO) requires several setup steps for preparation, deployment, etc. InfraRed simplifies them by automating with ansible most of those steps and configuration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It allows to deploy several OSP versions&lt;/li&gt;
&lt;li&gt;Allows to ease connection to installed vm roles (Ceph, Computes, Controllers, Undercloud)&lt;/li&gt;
&lt;li&gt;Allows to define working environments so one InfraRed-running host can be used to manage different environments&lt;/li&gt;
&lt;li&gt;and much more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setup-of-infrared-running-host&#34;&gt;Setup of InfraRed-running host&lt;/h2&gt;
&lt;p&gt;Setting InfraRed is quite easy, at the moment the version 2 (branch on github) is working pretty well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started with Ansible</title>
      <link>https://iranzo.io/blog/2017/02/20/getting-started-with-ansible/</link>
      <pubDate>Mon, 20 Feb 2017 23:10:00 +0100</pubDate>
      <guid>https://iranzo.io/blog/2017/02/20/getting-started-with-ansible/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve started to get familiar with &lt;a href=&#34;http://www.ansible.com&#34;&gt;Ansible&lt;/a&gt; because,
apart of getting more and more accepted for OSP-related tasks and
installation, I wanted to automate some tasks we needed to setup some servers
for the OpenStack group I work for.&lt;/p&gt;
&lt;p&gt;First of all, it&amp;rsquo;s recommended to get latest version of ansible (tested on
RHEL7 and Fedora), but in order not to mess with the system python libraries, it&amp;rsquo;s convenient to use python&amp;rsquo;s virtual environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing for stampy</title>
      <link>https://iranzo.io/blog/2016/11/05/unit-testing-for-stampy/</link>
      <pubDate>Sat, 05 Nov 2016 19:39:00 +0100</pubDate>
      <guid>https://iranzo.io/blog/2016/11/05/unit-testing-for-stampy/</guid>
      <description>&lt;p&gt;Since my prior post on &lt;a href=&#34;../../blog/2016/07/21/contributing-to-openstack/&#34;&gt;Contributing to OpenStack&lt;/a&gt;, I liked the idea of using some automated tests to validate functionality and specifically, the corner cases that could arise when playing with the code.&lt;/p&gt;
&lt;p&gt;Most of the errors fixed so far on stampy, were related with some pieces of the code not properly handling UTF or some information returned, etc and still it has improved, the idea of ensuring that prior errors were not put back into the code when some other changes were performed, started to arise to be a priority.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contributing to OpenStack</title>
      <link>https://iranzo.io/blog/2016/07/21/contributing-to-openstack/</link>
      <pubDate>Thu, 21 Jul 2016 17:32:47 +0200</pubDate>
      <guid>https://iranzo.io/blog/2016/07/21/contributing-to-openstack/</guid>
      <description>&lt;p&gt;Contributing to an OpenSource project might take some time at the beginning, the good thing with OpenStack is that there are lot of guides on how to start and collaborate.&lt;/p&gt;
&lt;p&gt;What I did is to look for a bug in the project tagged as &lt;a href=&#34;https://bugs.launchpad.net/openstack/&amp;#43;bugs?field.tag=low-hanging-fruit&amp;amp;orderby=status&amp;amp;start=0&#34;&gt;low-hanging-fruit&lt;/a&gt;, this allows to browse a large list of bugs that are classified as &lt;code&gt;easy&lt;/code&gt;, so they are the best place for new starters to get familiar with the workflow.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New blog rendering engine: Pelican</title>
      <link>https://iranzo.io/blog/2016/06/03/new-blog-rendering-engine-pelican/</link>
      <pubDate>Fri, 03 Jun 2016 17:23:47 +0200</pubDate>
      <guid>https://iranzo.io/blog/2016/06/03/new-blog-rendering-engine-pelican/</guid>
      <description>&lt;p&gt;As always, I don&amp;rsquo;t usually find myself keen to write about things I do, until I later realize they might be helpful for others, and that&amp;rsquo;s why in the past I decided to switch the place I was putting the information about why did to Github and also, take benefit of practicing markdown for writing the entries.&lt;/p&gt;
&lt;p&gt;At that time, I moved my old blog posts to markdown to be used in conjunction with Jekyll and to use OctoPress as the engine rendering the contents into a static website. The setup and migration was not difficult, but still require to use some ruby, while I was more familiar with Python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing a Telegram.org bot in Python</title>
      <link>https://iranzo.io/blog/2015/06/26/writing-a-telegram.org-bot-in-python/</link>
      <pubDate>Fri, 26 Jun 2015 17:12:30 +0200</pubDate>
      <guid>https://iranzo.io/blog/2015/06/26/writing-a-telegram.org-bot-in-python/</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://telegram.org&#34;&gt;Telegram.org&lt;/a&gt; recently announced the support for writing bots for their platform, by providing details at &lt;a href=&#34;https://core.telegram.org/bots&#34;&gt;https://core.telegram.org/bots&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was missing for a long time the ability to get a count on karma like we&amp;rsquo;ve on
IRC servers, so I started with it.&lt;/p&gt;
&lt;p&gt;My first try is published at github repo in &lt;a href=&#34;https://github.com/iranzo/stampython&#34;&gt;https://github.com/iranzo/stampython&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the moment it just uses the polling interface to check the new messages received on the channels the bot is in, and later processes them and send the relevant replies via messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrate SPIP-RSS post feed to HTML</title>
      <link>https://iranzo.io/blog/2015/04/01/migrate-spip-rss-post-feed-to-html/</link>
      <pubDate>Wed, 01 Apr 2015 16:49:13 +0200</pubDate>
      <guid>https://iranzo.io/blog/2015/04/01/migrate-spip-rss-post-feed-to-html/</guid>
      <description>&lt;p&gt;I had my old blog based on &lt;a href=&#34;http://www.spip.net&#34;&gt;SPIP&lt;/a&gt;, and I wanted to keep all the posts together, to make it easier to migrate in the future.&lt;/p&gt;
&lt;p&gt;Initially, I migrated my posts from blogger, where there&amp;rsquo;s an option to export the contents and some plugins to allow easier importing to markdown files (to be used by OctoPress), those were the recent posts, so part of the job was already done there.&lt;/p&gt;
&lt;p&gt;Next step, was to migrate old posts on my SPIP site.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHEV/oVirt API with Python</title>
      <link>https://iranzo.io/blog/2012/10/24/rhev/ovirt-api-with-python/</link>
      <pubDate>Wed, 24 Oct 2012 13:38:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2012/10/24/rhev/ovirt-api-with-python/</guid>
      <description>&lt;p&gt;&lt;code&gt;RHEV&lt;/code&gt;/&lt;code&gt;oVirt&lt;/code&gt; API allows faster and simple development of scripts and utilities ranging from gathering of information to VM/host, etc manipulation.&lt;/p&gt;
&lt;p&gt;For example, a simple script for connecting to API and list VM&amp;rsquo;s could be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; getopt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; optparse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ovirtsdk.api &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; API
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ovirtsdk.xml &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; params
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; choice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baseurl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://localhost:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; API(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;baseurl, username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin@internal&amp;#34;&lt;/span&gt;, password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redhat&amp;#34;&lt;/span&gt;, insecure&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; vm &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;.list()&lt;/code&gt; method works pretty well, but beware, it limits collections to 100 elements for performance reasons, so in those cases, we&amp;rsquo;ll need to check how many results do we have, and paginate by passing an extra argument to our &amp;ldquo;.list()&amp;rdquo; invocation, for example:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
