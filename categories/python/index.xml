<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Pablo Iranzo Gómez blog</title>
    <link>https://iranzo.io/categories/python/</link>
    <description>Recent content in Python on Pablo Iranzo Gómez blog</description>
    <image>
      <title>Pablo Iranzo Gómez blog</title>
      <url>https://iranzo.io/mugshot.png</url>
      <link>https://iranzo.io/mugshot.png</link>
    </image>
    <generator>Hugo -- 0.146.6</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2025 09:34:12 +0000</lastBuildDate>
    <atom:link href="https://iranzo.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>In action...@redken_bot with examples</title>
      <link>https://iranzo.io/blog/2022/01/20/in-action...@redken_bot-with-examples/</link>
      <pubDate>Thu, 20 Jan 2022 17:20:14 +0100</pubDate>
      <guid>https://iranzo.io/blog/2022/01/20/in-action...@redken_bot-with-examples/</guid>
      <description>See how to use @redken_bot in Telegram or discord with some examples!</description>
    </item>
    <item>
      <title>LDAP query from Python</title>
      <link>https://iranzo.io/blog/2021/10/19/ldap-query-from-python/</link>
      <pubDate>Tue, 19 Oct 2021 22:34:34 +0200</pubDate>
      <guid>https://iranzo.io/blog/2021/10/19/ldap-query-from-python/</guid>
      <description>This article describes how to use python to bind against an LDAP server and perform queries</description>
    </item>
    <item>
      <title>Redken machine learning for spam detection</title>
      <link>https://iranzo.io/blog/2021/06/24/redken-machine-learning-for-spam-detection/</link>
      <pubDate>Thu, 24 Jun 2021 22:00:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2021/06/24/redken-machine-learning-for-spam-detection/</guid>
      <description>&lt;p&gt;For some of the telegram groups I&amp;rsquo;m in, I&amp;rsquo;ve been detecting users that after some period of time, just publish spam messages of any topic.&lt;/p&gt;
&lt;p&gt;There are many bots for controlling when a user joins, by showing a CAPTCHA that user must resolve (either clicking a button, answering a mathematical operation, inputting a CAPTCHA image text, etc).&lt;/p&gt;
&lt;p&gt;Some time ago, a colleague was using Machine Learning and I wanted to have a look at it and it would make a good feature to implement.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Language detection in @redken_bot</title>
      <link>https://iranzo.io/blog/2020/03/25/language-detection-in-@redken_bot/</link>
      <pubDate>Wed, 25 Mar 2020 20:00:24 +0100</pubDate>
      <guid>https://iranzo.io/blog/2020/03/25/language-detection-in-@redken_bot/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Before the move to Python3, &lt;a href=&#34;https://t.me/redken_bot&#34;&gt;redken&lt;/a&gt; had per-group language configuration by using i18n, with the upgrade/rewrite of Python3 code there were some issues and I had to remove the support, defaulting everything to English (most of the outputs where already in English so not a great loss).&lt;/p&gt;
&lt;p&gt;On another side, having to manually configure each channel could be problematic as most users just add the bot to their groups but don&amp;rsquo;t care about other settings that might be useful like &lt;code&gt;welcome&lt;/code&gt; message, &lt;code&gt;inactivity&lt;/code&gt; for kicking out inactive users, etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>API access for Google Calendar and Google Sheet access</title>
      <link>https://iranzo.io/blog/2019/11/28/api-access-for-google-calendar-and-google-sheet-access/</link>
      <pubDate>Thu, 28 Nov 2019 17:11:36 +0100</pubDate>
      <guid>https://iranzo.io/blog/2019/11/28/api-access-for-google-calendar-and-google-sheet-access/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;During last days I&amp;rsquo;ve been playing around with python and API access to Google Sheets.&lt;/p&gt;
&lt;p&gt;Since some time ago, I already experimented with ICS parsing from python because added &lt;a href=&#34;https://t.me/redken_bot&#34;&gt;https://t.me/redken_bot&lt;/a&gt; access to calendar files (&lt;code&gt;.ics&lt;/code&gt;) so that it can provide daily reminders on chats about the events happening for the specific date, and had the chance to propose it&amp;rsquo;s usage to cover a specific use case: Accessing a spreadsheet in Google Sheets and parse its contents and output an ICS file so that the events listed and the dates specific for each one are available in an easier-to-consume approach.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python and iCalendar ICS processing</title>
      <link>https://iranzo.io/blog/2019/09/17/python-and-icalendar-ics-processing/</link>
      <pubDate>Tue, 17 Sep 2019 07:00:36 +0200</pubDate>
      <guid>https://iranzo.io/blog/2019/09/17/python-and-icalendar-ics-processing/</guid>
      <description>This article covers  how to do Internet Calendar processing of events in python and how those are leveraged in @redken_bot</description>
    </item>
    <item>
      <title>Telegram Redken bot documentation</title>
      <link>https://iranzo.io/redkendoc/telegram-redken_bot-documentation/</link>
      <pubDate>Mon, 04 Mar 2019 18:34:14 +0100</pubDate>
      <guid>https://iranzo.io/redkendoc/telegram-redken_bot-documentation/</guid>
      <description>&lt;p&gt;The new document is at &lt;a href=&#34;../../redkendoc/telegram-redken_bot-documentation/&#34;&gt;Redken Documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrate SPIP-RSS post feed to HTML</title>
      <link>https://iranzo.io/blog/2015/04/01/migrate-spip-rss-post-feed-to-html/</link>
      <pubDate>Wed, 01 Apr 2015 16:49:13 +0200</pubDate>
      <guid>https://iranzo.io/blog/2015/04/01/migrate-spip-rss-post-feed-to-html/</guid>
      <description>&lt;p&gt;I had my old blog based on &lt;a href=&#34;http://www.spip.net&#34;&gt;SPIP&lt;/a&gt;, and I wanted to keep all the posts together, to make it easier to migrate in the future.&lt;/p&gt;
&lt;p&gt;Initially, I migrated my posts from blogger, where there&amp;rsquo;s an option to export the contents and some plugins to allow easier importing to markdown files (to be used by OctoPress), those were the recent posts, so part of the job was already done there.&lt;/p&gt;
&lt;p&gt;Next step, was to migrate old posts on my SPIP site.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHEV/oVirt API with Python</title>
      <link>https://iranzo.io/blog/2012/10/24/rhev/ovirt-api-with-python/</link>
      <pubDate>Wed, 24 Oct 2012 13:38:00 +0200</pubDate>
      <guid>https://iranzo.io/blog/2012/10/24/rhev/ovirt-api-with-python/</guid>
      <description>&lt;p&gt;&lt;code&gt;RHEV&lt;/code&gt;/&lt;code&gt;oVirt&lt;/code&gt; API allows faster and simple development of scripts and utilities ranging from gathering of information to VM/host, etc manipulation.&lt;/p&gt;
&lt;p&gt;For example, a simple script for connecting to API and list VM&amp;rsquo;s could be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; getopt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; optparse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ovirtsdk.api &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; API
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ovirtsdk.xml &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; params
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; choice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baseurl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://localhost:8443&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; API(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;baseurl, username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin@internal&amp;#34;&lt;/span&gt;, password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redhat&amp;#34;&lt;/span&gt;, insecure&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; vm &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vms&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(vm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;.list()&lt;/code&gt; method works pretty well, but beware, it limits collections to 100 elements for performance reasons, so in those cases, we&amp;rsquo;ll need to check how many results do we have, and paginate by passing an extra argument to our &amp;ldquo;.list()&amp;rdquo; invocation, for example:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
